from pyomo.environ import *
from model import model

instance=model.create_instance('data.dat')
instance.dual=Suffix(direction=Suffix.IMPORT)
solver=SolverFactory('gurobi')
results=solver.solve(instance)

def divide(n,d):
	if d==0:
		return 0
	else:
		return n/d

with open('_results_overview.csv','w') as file:
	file.write('emissions,system_cost,system_energy_efficiency,system_resource_efficiency,solar_electric_input,solar_electric_output,solar_electric_capacity,wind_electric_input,wind_electric_output,wind_electric_capacity,hydro_electric_input,hydro_electric_output,hydro_electric_capacity,bioenergy_electric_input,bioenergy_electric_output,bioenergy_electric_capacity,nuclear_electric_input,nuclear_electric_output,nuclear_electric_capacity,fossil_electric_input,fossil_electric_output,fossil_electric_capacity,other_electric_input,other_electric_output,other_electric_capacity,biomass_fuel_input,biofuel_fuel_output,store_input,store_output,store_capacity,store_amount,transmit_input,transmit_output,transmit_capacity,e2h_convert_input,e2h_convert_output,e2h_convert_capacity,h2e_convert_input,h2e_convert_output,h2e_convert_capacity,reserve_input,reserve_output,reserve_capacity,reserve_amount,pipe_input,pipe_output,pipe_capacity,electric_supply,hydrogen_supply,biomass_fuel_supply,biofuel_fuel_supply,naturalgas_fuel_supply,petroleum_fuel_supply,coal_fuel_supply,electric_space_input,electric_space_output,electric_space_capacity,electric_water_input,electric_water_output,electric_water_capacity,electric_boiler_input,electric_boiler_output,electric_boiler_capacity,hydrogen_space_input,hydrogen_space_output,hydrogen_space_capacity,hydrogen_water_input,hydrogen_water_output,hydrogen_water_capacity,hydrogen_boiler_input,hydrogen_boiler_output,hydrogen_boiler_capacity,biomass_space_input,biomass_space_output,biomass_space_capacity,biomass_water_input,biomass_water_output,biomass_water_capacity,biomass_boiler_input,biomass_boiler_output,biomass_boiler_capacity,biofuel_space_input,biofuel_space_output,biofuel_space_capacity,biofuel_water_input,biofuel_water_output,biofuel_water_capacity,biofuel_boiler_input,biofuel_boiler_output,biofuel_boiler_capacity,naturalgas_space_input,naturalgas_space_output,naturalgas_space_capacity,naturalgas_water_input,naturalgas_water_output,naturalgas_water_capacity,naturalgas_boiler_input,naturalgas_boiler_output,naturalgas_boiler_capacity,petroleum_space_input,petroleum_space_output,petroleum_space_capacity,petroleum_water_input,petroleum_water_output,petroleum_water_capacity,petroleum_boiler_input,petroleum_boiler_output,petroleum_boiler_capacity,coal_space_input,coal_space_output,coal_space_capacity,coal_water_input,coal_water_output,coal_water_capacity,coal_boiler_input,coal_boiler_output,coal_boiler_capacity,electric_lightduty_input,electric_lightduty_output,electric_lightduty_capacity,electric_heavyduty_input,electric_heavyduty_output,electric_heavyduty_capacity,hydrogen_lightduty_input,hydrogen_lightduty_output,hydrogen_lightduty_capacity,hydrogen_heavyduty_input,hydrogen_heavyduty_output,hydrogen_heavyduty_capacity,biomass_lightduty_input,biomass_lightduty_output,biomass_lightduty_capacity,biomass_heavyduty_input,biomass_heavyduty_output,biomass_heavyduty_capacity,biofuel_lightduty_input,biofuel_lightduty_output,biofuel_lightduty_capacity,biofuel_heavyduty_input,biofuel_heavyduty_output,biofuel_heavyduty_capacity,naturalgas_lightduty_input,naturalgas_lightduty_output,naturalgas_lightduty_capacity,naturalgas_heavyduty_input,naturalgas_heavyduty_output,naturalgas_heavyduty_capacity,petroleum_lightduty_input,petroleum_lightduty_output,petroleum_lightduty_capacity,petroleum_heavyduty_input,petroleum_heavyduty_output,petroleum_heavyduty_capacity,coal_lightduty_input,coal_lightduty_output,coal_lightduty_capacity,coal_heavyduty_input,coal_heavyduty_output,coal_heavyduty_capacity,electric_fix_amount,hydrogen_fix_amount,biomass_fix_amount,biofuel_fix_amount,naturalgas_fix_amount,petroleum_fix_amount,coal_fix_amount,space_heat_demand,water_heat_demand,boiler_heat_demand,lightduty_transport_demand,heavyduty_transport_demand,fix_demand\n')
	emissions=instance.emit_amount.value
	system_cost=value(instance.obj)
	solar_electric_input=sum((instance.generate_energy['solar',t,l].value/value(instance.generate_efficiency['solar'])) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	wind_electric_input=sum((instance.generate_energy['wind',t,l].value/value(instance.generate_efficiency['wind'])) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydro_electric_input=sum((instance.generate_energy['hydro',t,l].value/value(instance.generate_efficiency['hydro'])) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	bioenergy_electric_input=sum((instance.generate_energy['bioenergy',t,l].value/value(instance.generate_efficiency['bioenergy'])) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	solar_electric_output=sum(instance.generate_energy['solar',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	wind_electric_output=sum(instance.generate_energy['wind',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydro_electric_output=sum(instance.generate_energy['hydro',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	bioenergy_electric_output=sum(instance.generate_energy['bioenergy',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	solar_electric_capacity=sum((instance.generate_new_capacity['solar',l].value+value(instance.generate_exist_capacity['solar',l])) for l in instance.location)-sum(instance.generate_old_capacity['solar',l].value for l in instance.location)
	wind_electric_capacity=sum((instance.generate_new_capacity['wind',l].value+value(instance.generate_exist_capacity['wind',l])) for l in instance.location)-sum(instance.generate_old_capacity['wind',l].value for l in instance.location)
	hydro_electric_capacity=sum((instance.generate_new_capacity['hydro',l].value+value(instance.generate_exist_capacity['hydro',l])) for l in instance.location)-sum(instance.generate_old_capacity['hydro',l].value for l in instance.location)
	bioenergy_electric_capacity=sum((instance.generate_new_capacity['bioenergy',l].value+value(instance.generate_exist_capacity['solar',l])) for l in instance.location)-sum(instance.generate_old_capacity['bioenergy',l].value for l in instance.location)
	nuclear_electric_input=sum((instance.generate_energy['nuclear',t,l].value/value(instance.generate_efficiency['nuclear'])) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	fossil_electric_input=sum((instance.generate_energy['fossil',t,l].value/value(instance.generate_efficiency['fossil'])) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	other_electric_input=sum((instance.generate_energy['other',t,l].value/value(instance.generate_efficiency['other'])) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	nuclear_electric_output=sum(instance.generate_energy['nuclear',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	fossil_electric_output=sum(instance.generate_energy['fossil',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	other_electric_output=sum(instance.generate_energy['other',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	nuclear_electric_capacity=sum((instance.generate_new_capacity['nuclear',l].value+value(instance.generate_exist_capacity['nuclear',l])) for l in instance.location)-sum(instance.generate_old_capacity['nuclear',l].value for l in instance.location)
	fossil_electric_capacity=sum((instance.generate_new_capacity['fossil',l].value+value(instance.generate_exist_capacity['fossil',l])) for l in instance.location)-sum(instance.generate_old_capacity['fossil',l].value for l in instance.location)
	other_electric_capacity=sum((instance.generate_new_capacity['other',l].value+value(instance.generate_exist_capacity['other',l])) for l in instance.location)-sum(instance.generate_old_capacity['other',l].value for l in instance.location)
	biomass_fuel_input=sum((instance.fuel_supply['biofuel',t,l].value/value(instance.bioenergy_convert_efficiency)) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biofuel_fuel_output=sum(instance.fuel_supply['biofuel',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	store_input=sum(instance.store_energy_input[t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	store_output=sum(instance.store_energy_output[t,l].value*value(instance.store_efficiency) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	store_capacity=(sum((instance.store_new_capacity[l].value+value(instance.store_exist_capacity[l])) for l in instance.location)-sum(instance.store_old_capacity[l].value for l in instance.location))
	store_amount=sum(instance.store_energy_level[t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	transmit_input=sum(instance.transmit_energy_transfer[t,l,k].value for t in instance.time for l in instance.location for k in instance.location)*value(instance.invest_operate_ratio)
	transmit_output=sum(instance.transmit_energy_transfer[t,l,k].value*value(instance.transmit_efficiency) for t in instance.time for l in instance.location for k in instance.location)*value(instance.invest_operate_ratio)
	transmit_capacity=(sum((instance.transmit_new_capacity[l,k].value+value(instance.transmit_exist_capacity[l,k])) for l in instance.location for k in instance.location)-sum(instance.transmit_old_capacity[l,k].value for l in instance.location for k in instance.location))
	e2h_convert_input=sum(instance.e2h_energy_convert[t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	e2h_convert_output=sum(instance.e2h_energy_convert[t,l].value*value(instance.e2h_efficiency) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	e2h_convert_capacity=(sum((instance.e2h_new_capacity[l].value+value(instance.e2h_exist_capacity[l])) for l in instance.location)-sum(instance.e2h_old_capacity[l].value for l in instance.location))
	h2e_convert_input=sum(instance.h2e_energy_convert[t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	h2e_convert_output=sum(instance.h2e_energy_convert[t,l].value*value(instance.h2e_efficiency) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	h2e_convert_capacity=(sum((instance.h2e_new_capacity[l].value+value(instance.h2e_exist_capacity[l])) for l in instance.location)-sum(instance.h2e_old_capacity[l].value for l in instance.location))
	reserve_input=sum(instance.reserve_energy_input[t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	reserve_output=sum(instance.reserve_energy_output[t,l].value*value(instance.reserve_efficiency) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	reserve_capacity=(sum((instance.reserve_new_capacity[l].value+value(instance.reserve_exist_capacity[l])) for l in instance.location)-sum(instance.reserve_old_capacity[l].value for l in instance.location))
	reserve_amount=sum(instance.reserve_energy_level[t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	pipe_input=sum(instance.pipe_energy_transfer[t,l,k].value for t in instance.time for l in instance.location for k in instance.location)*value(instance.invest_operate_ratio)
	pipe_output=sum(instance.pipe_energy_transfer[t,l,k].value*value(instance.pipe_efficiency) for t in instance.time for l in instance.location for k in instance.location)*value(instance.invest_operate_ratio)
	pipe_capacity=(sum((instance.pipe_new_capacity[l,k].value+value(instance.pipe_exist_capacity[l,k])) for l in instance.location for k in instance.location)-sum(instance.pipe_old_capacity[l,k].value for l in instance.location for k in instance.location))
	electric_supply=sum(instance.electric_supply[t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogen_supply=sum(instance.hydrogen_supply[t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biomass_fuel_supply=sum(instance.fuel_supply['biomass',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biofuel_fuel_supply=sum(instance.fuel_supply['biofuel',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	naturalgas_fuel_supply=sum(instance.fuel_supply['naturalgas',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	petroleum_fuel_supply=sum(instance.fuel_supply['petroleum',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	coal_fuel_supply=sum(instance.fuel_supply['coal',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	electric_space_input=sum(instance.match_energy_electric_heat['space',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	electric_water_input=sum(instance.match_energy_electric_heat['water',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	electric_boiler_input=sum(instance.match_energy_electric_heat['boiler',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	electric_space_output=sum(instance.match_energy_electric_heat['space',t,l].value*value(instance.match_efficiency_electric_heat['space']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	electric_water_output=sum(instance.match_energy_electric_heat['water',t,l].value*value(instance.match_efficiency_electric_heat['water']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	electric_boiler_output=sum(instance.match_energy_electric_heat['boiler',t,l].value*value(instance.match_efficiency_electric_heat['boiler']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	electric_space_capacity=(sum((instance.match_new_capacity_electric_heat['space',l].value+value(instance.match_exist_capacity_electric_heat['space',l])) for l in instance.location)-sum(instance.match_old_capacity_electric_heat['space',l].value for l in instance.location))
	electric_water_capacity=(sum((instance.match_new_capacity_electric_heat['water',l].value+value(instance.match_exist_capacity_electric_heat['water',l])) for l in instance.location)-sum(instance.match_old_capacity_electric_heat['water',l].value for l in instance.location))
	electric_boiler_capacity=(sum((instance.match_new_capacity_electric_heat['boiler',l].value+value(instance.match_exist_capacity_electric_heat['boiler',l])) for l in instance.location)-sum(instance.match_old_capacity_electric_heat['boiler',l].value for l in instance.location))
	hydrogen_space_input=sum(instance.match_energy_hydrogen_heat['space',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogen_water_input=sum(instance.match_energy_hydrogen_heat['water',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogen_boiler_input=sum(instance.match_energy_hydrogen_heat['boiler',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogen_space_output=sum(instance.match_energy_hydrogen_heat['space',t,l].value*value(instance.match_efficiency_hydrogen_heat['space']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogen_water_output=sum(instance.match_energy_hydrogen_heat['water',t,l].value*value(instance.match_efficiency_hydrogen_heat['water']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogen_boiler_output=sum(instance.match_energy_hydrogen_heat['boiler',t,l].value*value(instance.match_efficiency_hydrogen_heat['boiler']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogen_space_capacity=(sum((instance.match_new_capacity_hydrogen_heat['space',l].value+value(instance.match_exist_capacity_hydrogen_heat['space',l])) for l in instance.location)-sum(instance.match_old_capacity_hydrogen_heat['space',l].value for l in instance.location))
	hydrogen_water_capacity=(sum((instance.match_new_capacity_hydrogen_heat['water',l].value+value(instance.match_exist_capacity_hydrogen_heat['water',l])) for l in instance.location)-sum(instance.match_old_capacity_hydrogen_heat['water',l].value for l in instance.location))
	hydrogen_boiler_capacity=(sum((instance.match_new_capacity_hydrogen_heat['boiler',l].value+value(instance.match_exist_capacity_hydrogen_heat['boiler',l])) for l in instance.location)-sum(instance.match_old_capacity_hydrogen_heat['boiler',l].value for l in instance.location))
	biomass_space_input=sum(instance.match_energy_fuel_heat['biomass','space',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biomass_water_input=sum(instance.match_energy_fuel_heat['biomass','water',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biomass_boiler_input=sum(instance.match_energy_fuel_heat['biomass','boiler',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biofuel_space_input=sum(instance.match_energy_fuel_heat['biofuel','space',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biofuel_water_input=sum(instance.match_energy_fuel_heat['biofuel','water',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biofuel_boiler_input=sum(instance.match_energy_fuel_heat['biofuel','boiler',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biomass_space_output=sum(instance.match_energy_fuel_heat['biomass','space',t,l].value*value(instance.match_efficiency_fuel_heat['biomass','space']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biomass_water_output=sum(instance.match_energy_fuel_heat['biomass','water',t,l].value*value(instance.match_efficiency_fuel_heat['biomass','water']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biomass_boiler_output=sum(instance.match_energy_fuel_heat['biomass','boiler',t,l].value*value(instance.match_efficiency_fuel_heat['biomass','boiler']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biofuel_space_output=sum(instance.match_energy_fuel_heat['biofuel','space',t,l].value*value(instance.match_efficiency_fuel_heat['biofuel','space']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biofuel_water_output=sum(instance.match_energy_fuel_heat['biofuel','water',t,l].value*value(instance.match_efficiency_fuel_heat['biofuel','water']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biofuel_boiler_output=sum(instance.match_energy_fuel_heat['biofuel','boiler',t,l].value*value(instance.match_efficiency_fuel_heat['biofuel','boiler']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biomass_space_capacity=(sum((instance.match_new_capacity_fuel_heat['biomass','space',l].value+value(instance.match_exist_capacity_fuel_heat['biomass','space',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_heat['biomass','space',l].value for l in instance.location))
	biomass_water_capacity=(sum((instance.match_new_capacity_fuel_heat['biomass','water',l].value+value(instance.match_exist_capacity_fuel_heat['biomass','water',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_heat['biomass','water',l].value for l in instance.location))
	biomass_boiler_capacity=(sum((instance.match_new_capacity_fuel_heat['biomass','boiler',l].value+value(instance.match_exist_capacity_fuel_heat['biomass','boiler',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_heat['biomass','boiler',l].value for l in instance.location))
	biofuel_space_capacity=(sum((instance.match_new_capacity_fuel_heat['biofuel','space',l].value+value(instance.match_exist_capacity_fuel_heat['biofuel','space',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_heat['biofuel','space',l].value for l in instance.location))
	biofuel_water_capacity=(sum((instance.match_new_capacity_fuel_heat['biofuel','water',l].value+value(instance.match_exist_capacity_fuel_heat['biofuel','water',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_heat['biofuel','boiler',l].value for l in instance.location))
	biofuel_boiler_capacity=(sum((instance.match_new_capacity_fuel_heat['biofuel','boiler',l].value+value(instance.match_exist_capacity_fuel_heat['biofuel','boiler',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_heat['biofuel','boiler',l].value for l in instance.location))
	naturalgas_space_input=sum(instance.match_energy_fuel_heat['naturalgas','space',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	naturalgas_water_input=sum(instance.match_energy_fuel_heat['naturalgas','water',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	naturalgas_boiler_input=sum(instance.match_energy_fuel_heat['naturalgas','boiler',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	petroleum_space_input=sum(instance.match_energy_fuel_heat['petroleum','space',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	petroleum_water_input=sum(instance.match_energy_fuel_heat['petroleum','water',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	petroleum_boiler_input=sum(instance.match_energy_fuel_heat['petroleum','boiler',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	coal_space_input=sum(instance.match_energy_fuel_heat['coal','space',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	coal_water_input=sum(instance.match_energy_fuel_heat['coal','water',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	coal_boiler_input=sum(instance.match_energy_fuel_heat['coal','boiler',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	naturalgas_space_output=sum(instance.match_energy_fuel_heat['naturalgas','space',t,l].value*value(instance.match_efficiency_fuel_heat['naturalgas','space']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	naturalgas_water_output=sum(instance.match_energy_fuel_heat['naturalgas','water',t,l].value*value(instance.match_efficiency_fuel_heat['naturalgas','water']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	naturalgas_boiler_output=sum(instance.match_energy_fuel_heat['naturalgas','boiler',t,l].value*value(instance.match_efficiency_fuel_heat['naturalgas','boiler']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	petroleum_space_output=sum(instance.match_energy_fuel_heat['petroleum','space',t,l].value*value(instance.match_efficiency_fuel_heat['petroleum','space']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	petroleum_water_output=sum(instance.match_energy_fuel_heat['petroleum','water',t,l].value*value(instance.match_efficiency_fuel_heat['petroleum','water']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	petroleum_boiler_output=sum(instance.match_energy_fuel_heat['petroleum','boiler',t,l].value*value(instance.match_efficiency_fuel_heat['petroleum','boiler']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	coal_space_output=sum(instance.match_energy_fuel_heat['coal','space',t,l].value*value(instance.match_efficiency_fuel_heat['coal','space']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	coal_water_output=sum(instance.match_energy_fuel_heat['coal','water',t,l].value*value(instance.match_efficiency_fuel_heat['coal','water']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	coal_boiler_output=sum(instance.match_energy_fuel_heat['coal','boiler',t,l].value*value(instance.match_efficiency_fuel_heat['coal','boiler']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	naturalgas_space_capacity=(sum((instance.match_new_capacity_fuel_heat['naturalgas','space',l].value+value(instance.match_exist_capacity_fuel_heat['naturalgas','space',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_heat['naturalgas','space',l].value for l in instance.location))
	naturalgas_water_capacity=(sum((instance.match_new_capacity_fuel_heat['naturalgas','water',l].value+value(instance.match_exist_capacity_fuel_heat['naturalgas','water',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_heat['naturalgas','water',l].value for l in instance.location))
	naturalgas_boiler_capacity=(sum((instance.match_new_capacity_fuel_heat['naturalgas','boiler',l].value+value(instance.match_exist_capacity_fuel_heat['naturalgas','boiler',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_heat['naturalgas','boiler',l].value for l in instance.location))
	petroleum_space_capacity=(sum((instance.match_new_capacity_fuel_heat['petroleum','space',l].value+value(instance.match_exist_capacity_fuel_heat['petroleum','space',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_heat['petroleum','space',l].value for l in instance.location))
	petroleum_water_capacity=(sum((instance.match_new_capacity_fuel_heat['petroleum','water',l].value+value(instance.match_exist_capacity_fuel_heat['petroleum','water',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_heat['petroleum','water',l].value for l in instance.location))
	petroleum_boiler_capacity=(sum((instance.match_new_capacity_fuel_heat['petroleum','boiler',l].value+value(instance.match_exist_capacity_fuel_heat['petroleum','boiler',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_heat['petroleum','boiler',l].value for l in instance.location))
	coal_space_capacity=(sum((instance.match_new_capacity_fuel_heat['coal','space',l].value+value(instance.match_exist_capacity_fuel_heat['coal','space',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_heat['coal','space',l].value for l in instance.location))
	coal_water_capacity=(sum((instance.match_new_capacity_fuel_heat['coal','water',l].value+value(instance.match_exist_capacity_fuel_heat['coal','water',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_heat['coal','water',l].value for l in instance.location))
	coal_boiler_capacity=(sum((instance.match_new_capacity_fuel_heat['coal','boiler',l].value+value(instance.match_exist_capacity_fuel_heat['coal','boiler',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_heat['coal','boiler',l].value for l in instance.location))
	electric_lightduty_input=sum(instance.match_energy_electric_transport['lightduty',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	electric_heavyduty_input=sum(instance.match_energy_electric_transport['heavyduty',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	electric_lightduty_output=sum(instance.match_energy_electric_transport['lightduty',t,l].value*value(instance.match_efficiency_electric_transport['lightduty']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	electric_heavyduty_output=sum(instance.match_energy_electric_transport['heavyduty',t,l].value*value(instance.match_efficiency_electric_transport['heavyduty']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	electric_lightduty_capacity=(sum((instance.match_new_capacity_electric_transport['lightduty',l].value+value(instance.match_exist_capacity_electric_transport['lightduty',l])) for l in instance.location)-sum(instance.match_old_capacity_electric_transport['lightduty',l].value for l in instance.location))
	electric_heavyduty_capacity=(sum((instance.match_new_capacity_electric_transport['heavyduty',l].value+value(instance.match_exist_capacity_electric_transport['heavyduty',l])) for l in instance.location)-sum(instance.match_old_capacity_electric_transport['heavyduty',l].value for l in instance.location))
	hydrogen_lightduty_input=sum(instance.match_energy_hydrogen_transport['lightduty',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogen_heavyduty_input=sum(instance.match_energy_hydrogen_transport['heavyduty',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogen_lightduty_output=sum(instance.match_energy_hydrogen_transport['lightduty',t,l].value*value(instance.match_efficiency_hydrogen_transport['lightduty']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogen_heavyduty_output=sum(instance.match_energy_hydrogen_transport['heavyduty',t,l].value*value(instance.match_efficiency_hydrogen_transport['heavyduty']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogen_lightduty_capacity=(sum((instance.match_new_capacity_hydrogen_transport['lightduty',l].value+value(instance.match_exist_capacity_hydrogen_transport['lightduty',l])) for l in instance.location)-sum(instance.match_old_capacity_hydrogen_transport['lightduty',l].value for l in instance.location))
	hydrogen_heavyduty_capacity=(sum((instance.match_new_capacity_hydrogen_transport['heavyduty',l].value+value(instance.match_exist_capacity_hydrogen_transport['heavyduty',l])) for l in instance.location)-sum(instance.match_old_capacity_hydrogen_transport['heavyduty',l].value for l in instance.location))
	biomass_lightduty_input=sum(instance.match_energy_fuel_transport['biomass','lightduty',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biomass_heavyduty_input=sum(instance.match_energy_fuel_transport['biomass','heavyduty',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biofuel_lightduty_input=sum(instance.match_energy_fuel_transport['biofuel','lightduty',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biofuel_heavyduty_input=sum(instance.match_energy_fuel_transport['biofuel','heavyduty',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biomass_lightduty_output=sum(instance.match_energy_fuel_transport['biomass','lightduty',t,l].value*value(instance.match_efficiency_fuel_transport['biomass','lightduty']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biomass_heavyduty_output=sum(instance.match_energy_fuel_transport['biomass','heavyduty',t,l].value*value(instance.match_efficiency_fuel_transport['biomass','heavyduty']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biofuel_lightduty_output=sum(instance.match_energy_fuel_transport['biofuel','lightduty',t,l].value*value(instance.match_efficiency_fuel_transport['biofuel','lightduty']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biofuel_heavyduty_output=sum(instance.match_energy_fuel_transport['biofuel','heavyduty',t,l].value*value(instance.match_efficiency_fuel_transport['biofuel','heavyduty']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biomass_lightduty_capacity=(sum((instance.match_new_capacity_fuel_transport['biomass','lightduty',l].value+value(instance.match_exist_capacity_fuel_transport['biomass','lightduty',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_transport['biomass','lightduty',l].value for l in instance.location))
	biomass_heavyduty_capacity=(sum((instance.match_new_capacity_fuel_transport['biomass','heavyduty',l].value+value(instance.match_exist_capacity_fuel_transport['biomass','heavyduty',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_transport['biomass','heavyduty',l].value for l in instance.location))
	biofuel_lightduty_capacity=(sum((instance.match_new_capacity_fuel_transport['biofuel','lightduty',l].value+value(instance.match_exist_capacity_fuel_transport['biofuel','lightduty',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_transport['biofuel','lightduty',l].value for l in instance.location))
	biofuel_heavyduty_capacity=(sum((instance.match_new_capacity_fuel_transport['biofuel','heavyduty',l].value+value(instance.match_exist_capacity_fuel_transport['biofuel','heavyduty',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_transport['biofuel','heavyduty',l].value for l in instance.location))
	naturalgas_lightduty_input=sum(instance.match_energy_fuel_transport['naturalgas','lightduty',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	naturalgas_heavyduty_input=sum(instance.match_energy_fuel_transport['naturalgas','heavyduty',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	petroleum_lightduty_input=sum(instance.match_energy_fuel_transport['petroleum','lightduty',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	petroleum_heavyduty_input=sum(instance.match_energy_fuel_transport['petroleum','heavyduty',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	coal_lightduty_input=sum(instance.match_energy_fuel_transport['coal','lightduty',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	coal_heavyduty_input=sum(instance.match_energy_fuel_transport['coal','heavyduty',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	naturalgas_lightduty_output=sum(instance.match_energy_fuel_transport['naturalgas','lightduty',t,l].value*value(instance.match_efficiency_fuel_transport['naturalgas','lightduty']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	naturalgas_heavyduty_output=sum(instance.match_energy_fuel_transport['naturalgas','heavyduty',t,l].value*value(instance.match_efficiency_fuel_transport['naturalgas','heavyduty']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	petroleum_lightduty_output=sum(instance.match_energy_fuel_transport['petroleum','lightduty',t,l].value*value(instance.match_efficiency_fuel_transport['petroleum','lightduty']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	petroleum_heavyduty_output=sum(instance.match_energy_fuel_transport['petroleum','heavyduty',t,l].value*value(instance.match_efficiency_fuel_transport['petroleum','heavyduty']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	coal_lightduty_output=sum(instance.match_energy_fuel_transport['coal','lightduty',t,l].value*value(instance.match_efficiency_fuel_transport['coal','lightduty']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	coal_heavyduty_output=sum(instance.match_energy_fuel_transport['coal','heavyduty',t,l].value*value(instance.match_efficiency_fuel_transport['coal','heavyduty']) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	naturalgas_lightduty_capacity=(sum((instance.match_new_capacity_fuel_transport['naturalgas','lightduty',l].value+value(instance.match_exist_capacity_fuel_transport['naturalgas','lightduty',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_transport['naturalgas','lightduty',l].value for l in instance.location))
	naturalgas_heavyduty_capacity=(sum((instance.match_new_capacity_fuel_transport['naturalgas','heavyduty',l].value+value(instance.match_exist_capacity_fuel_transport['naturalgas','heavyduty',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_transport['naturalgas','heavyduty',l].value for l in instance.location))
	petroleum_lightduty_capacity=(sum((instance.match_new_capacity_fuel_transport['petroleum','lightduty',l].value+value(instance.match_exist_capacity_fuel_transport['petroleum','lightduty',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_transport['petroleum','lightduty',l].value for l in instance.location))
	petroleum_heavyduty_capacity=(sum((instance.match_new_capacity_fuel_transport['petroleum','heavyduty',l].value+value(instance.match_exist_capacity_fuel_transport['petroleum','heavyduty',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_transport['petroleum','heavyduty',l].value for l in instance.location))
	coal_lightduty_capacity=(sum((instance.match_new_capacity_fuel_transport['coal','lightduty',l].value+value(instance.match_exist_capacity_fuel_transport['coal','lightduty',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_transport['coal','lightduty',l].value for l in instance.location))
	coal_heavyduty_capacity=(sum((instance.match_new_capacity_fuel_transport['coal','heavyduty',l].value+value(instance.match_exist_capacity_fuel_transport['coal','heavyduty',l])) for l in instance.location)-sum(instance.match_old_capacity_fuel_transport['coal','heavyduty',l].value for l in instance.location))
	electric_fix_amount=sum(instance.match_energy_electric_fix[w,t,l].value for w in instance.fix_use for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogen_fix_amount=sum(instance.match_energy_hydrogen_fix[w,t,l].value for w in instance.fix_use for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biomass_fix_amount=sum(instance.match_energy_fuel_fix['biomass',w,t,l].value for w in instance.fix_use for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	biofuel_fix_amount=sum(instance.match_energy_fuel_fix['biofuel',w,t,l].value for w in instance.fix_use for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	naturalgas_fix_amount=sum(instance.match_energy_fuel_fix['naturalgas',w,t,l].value for w in instance.fix_use for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	petroleum_fix_amount=sum(instance.match_energy_fuel_fix['petroleum',w,t,l].value for w in instance.fix_use for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	coal_fix_amount=sum(instance.match_energy_fuel_fix['coal',w,t,l].value for w in instance.fix_use for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	space_heat_demand=sum(value(instance.heat_demand['space',t,l]) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	water_heat_demand=sum(value(instance.heat_demand['water',t,l]) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	boiler_heat_demand=sum(value(instance.heat_demand['boiler',t,l]) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	lightduty_transport_demand=sum(value(instance.transport_demand['lightduty',t,l]) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	heavyduty_transport_demand=sum(value(instance.transport_demand['heavyduty',t,l]) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	fix_demand=(sum(value(instance.fix_demand_electric[w,t,l]) for w in instance.fix_use for t in instance.time for l in instance.location)+sum(value(instance.fix_demand_hydrogen[w,t,l]) for w in instance.fix_use for t in instance.time for l in instance.location)+sum(value(instance.fix_demand_fuel[f,w,t,l]) for f in instance.fuel_source for w in instance.fix_use for t in instance.time for l in instance.location))*value(instance.invest_operate_ratio)
	system_energy_efficiency=divide((space_heat_demand+water_heat_demand+boiler_heat_demand+lightduty_transport_demand+heavyduty_transport_demand+fix_demand),(solar_electric_input+wind_electric_input+hydro_electric_input+nuclear_electric_input+bioenergy_electric_input+fossil_electric_input+other_electric_input+biomass_fuel_input+biomass_fuel_supply+naturalgas_fuel_supply+petroleum_fuel_supply+coal_fuel_supply))
	system_resource_efficiency=divide((solar_electric_output+wind_electric_output+hydro_electric_output+nuclear_electric_output+bioenergy_electric_output+fossil_electric_output+other_electric_output+store_amount+transmit_input+e2h_convert_output+h2e_convert_output+reserve_amount+pipe_input+electric_space_output+electric_water_output+electric_boiler_output+hydrogen_space_output+hydrogen_water_output+hydrogen_boiler_output+biomass_space_output+biomass_water_output+biomass_boiler_output+biofuel_space_output+biofuel_water_output+biofuel_boiler_output+naturalgas_space_output+naturalgas_water_output+naturalgas_boiler_output+petroleum_space_output+petroleum_water_output+petroleum_boiler_output+coal_space_output+coal_water_output+coal_boiler_output+electric_lightduty_output+electric_heavyduty_output+hydrogen_lightduty_output+hydrogen_heavyduty_output+biomass_lightduty_output+biomass_heavyduty_output+biofuel_lightduty_output+biofuel_heavyduty_output+naturalgas_lightduty_output+naturalgas_heavyduty_output+petroleum_lightduty_output+petroleum_heavyduty_output+coal_lightduty_output+coal_heavyduty_output),((solar_electric_capacity+wind_electric_capacity+hydro_electric_capacity+nuclear_electric_capacity+bioenergy_electric_capacity+fossil_electric_capacity+other_electric_capacity+store_capacity+transmit_capacity+e2h_convert_capacity+h2e_convert_capacity+reserve_capacity+pipe_capacity+electric_space_capacity+electric_water_capacity+electric_boiler_capacity+hydrogen_space_capacity+hydrogen_water_capacity+hydrogen_boiler_capacity+biomass_space_capacity+biomass_water_capacity+biomass_boiler_capacity+biofuel_space_capacity+biofuel_water_capacity+biofuel_boiler_capacity+naturalgas_space_capacity+naturalgas_water_capacity+naturalgas_boiler_capacity+petroleum_space_capacity+petroleum_water_capacity+petroleum_boiler_capacity+coal_space_capacity+coal_water_capacity+coal_boiler_capacity+electric_lightduty_capacity+electric_heavyduty_capacity+hydrogen_lightduty_capacity+hydrogen_heavyduty_capacity+biomass_lightduty_capacity+biomass_heavyduty_capacity+biofuel_lightduty_capacity+biofuel_heavyduty_capacity+naturalgas_lightduty_capacity+naturalgas_heavyduty_capacity+petroleum_lightduty_capacity+petroleum_heavyduty_capacity+coal_lightduty_capacity+coal_heavyduty_capacity)*instance.time_steps.value*value(instance.invest_operate_ratio)))
	file.write('%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\n' % (emissions,system_cost,system_energy_efficiency,system_resource_efficiency,solar_electric_input,solar_electric_output,solar_electric_capacity,wind_electric_input,wind_electric_output,wind_electric_capacity,hydro_electric_input,hydro_electric_output,hydro_electric_capacity,bioenergy_electric_input,bioenergy_electric_output,bioenergy_electric_capacity,nuclear_electric_input,nuclear_electric_output,nuclear_electric_capacity,fossil_electric_input,fossil_electric_output,fossil_electric_capacity,other_electric_input,other_electric_output,other_electric_capacity,biomass_fuel_input,biofuel_fuel_output,store_input,store_output,store_capacity,store_amount,transmit_input,transmit_output,transmit_capacity,e2h_convert_input,e2h_convert_output,e2h_convert_capacity,h2e_convert_input,h2e_convert_output,h2e_convert_capacity,reserve_input,reserve_output,reserve_capacity,reserve_amount,pipe_input,pipe_output,pipe_capacity,electric_supply,hydrogen_supply,biomass_fuel_supply,biofuel_fuel_supply,naturalgas_fuel_supply,petroleum_fuel_supply,coal_fuel_supply,electric_space_input,electric_space_output,electric_space_capacity,electric_water_input,electric_water_output,electric_water_capacity,electric_boiler_input,electric_boiler_output,electric_boiler_capacity,hydrogen_space_input,hydrogen_space_output,hydrogen_space_capacity,hydrogen_water_input,hydrogen_water_output,hydrogen_water_capacity,hydrogen_boiler_input,hydrogen_boiler_output,hydrogen_boiler_capacity,biomass_space_input,biomass_space_output,biomass_space_capacity,biomass_water_input,biomass_water_output,biomass_water_capacity,biomass_boiler_input,biomass_boiler_output,biomass_boiler_capacity,biofuel_space_input,biofuel_space_output,biofuel_space_capacity,biofuel_water_input,biofuel_water_output,biofuel_water_capacity,biofuel_boiler_input,biofuel_boiler_output,biofuel_boiler_capacity,naturalgas_space_input,naturalgas_space_output,naturalgas_space_capacity,naturalgas_water_input,naturalgas_water_output,naturalgas_water_capacity,naturalgas_boiler_input,naturalgas_boiler_output,naturalgas_boiler_capacity,petroleum_space_input,petroleum_space_output,petroleum_space_capacity,petroleum_water_input,petroleum_water_output,petroleum_water_capacity,petroleum_boiler_input,petroleum_boiler_output,petroleum_boiler_capacity,coal_space_input,coal_space_output,coal_space_capacity,coal_water_input,coal_water_output,coal_water_capacity,coal_boiler_input,coal_boiler_output,coal_boiler_capacity,electric_lightduty_input,electric_lightduty_output,electric_lightduty_capacity,electric_heavyduty_input,electric_heavyduty_output,electric_heavyduty_capacity,hydrogen_lightduty_input,hydrogen_lightduty_output,hydrogen_lightduty_capacity,hydrogen_heavyduty_input,hydrogen_heavyduty_output,hydrogen_heavyduty_capacity,biomass_lightduty_input,biomass_lightduty_output,biomass_lightduty_capacity,biomass_heavyduty_input,biomass_heavyduty_output,biomass_heavyduty_capacity,biofuel_lightduty_input,biofuel_lightduty_output,biofuel_lightduty_capacity,biofuel_heavyduty_input,biofuel_heavyduty_output,biofuel_heavyduty_capacity,naturalgas_lightduty_input,naturalgas_lightduty_output,naturalgas_lightduty_capacity,naturalgas_heavyduty_input,naturalgas_heavyduty_output,naturalgas_heavyduty_capacity,petroleum_lightduty_input,petroleum_lightduty_output,petroleum_lightduty_capacity,petroleum_heavyduty_input,petroleum_heavyduty_output,petroleum_heavyduty_capacity,coal_lightduty_input,coal_lightduty_output,coal_lightduty_capacity,coal_heavyduty_input,coal_heavyduty_output,coal_heavyduty_capacity,electric_fix_amount,hydrogen_fix_amount,biomass_fix_amount,biofuel_fix_amount,naturalgas_fix_amount,petroleum_fix_amount,coal_fix_amount,space_heat_demand,water_heat_demand,boiler_heat_demand,lightduty_transport_demand,heavyduty_transport_demand,fix_demand))