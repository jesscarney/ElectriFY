from pyomo.environ import *
from model import model

instance=model.create_instance('data.dat')
solver=SolverFactory('gurobi')
results=solver.solve(instance)

with open('_results_sankey.csv','w') as file:
	file.write('solar_electricsupply,wind_electricsupply,hydro_electricsupply,bioenergy_electricsupply,nuclear_electricsupply,fossil_electricsupply,electricsupply_electricdemand,electricsupply_store,electricsupply_transmit,store_electricdemand,transmit_electricdemand,electricsupply_hydrogensupply,hydrogendemand_electricdemand,hydrogensupply_hydrogendemand,hydrogensupply_reserve,hydrogensupply_pipe,reserve_hydrogendemand,pipe_hydrogendemand,electric_space_heat,electric_water_heat,electric_boiler_heat,electric_lightduty_transport,electric_heavyduty_transport,electric_fix,hydrogen_space_heat,hydrogen_water_heat,hydrogen_boiler_heat,hydrogen_lightduty_transport,hydrogen_heavyduty_transport,hydrogen_fix,bioenergy_space_heat,bioenergy_water_heat,bioenergy_boiler_heat,bioenergy_lightduty_transport,bioenergy_heavyduty_transport,bioenergy_fix,fossil_space_heat,fossil_water_heat,fossil_boiler_heat,fossil_lightduty_transport,fossil_heavyduty_transport,fossil_fix\n')
	solar_electricsupply=sum(instance.generate_energy['solar',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	wind_electricsupply=sum(instance.generate_energy['wind',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydro_electricsupply=sum(instance.generate_energy['hydro',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	bioenergy_electricsupply=(sum(instance.generate_energy['bioenergy',t,l].value for t in instance.time for l in instance.location)/value(instance.generate_efficiency['bioenergy']))*value(instance.invest_operate_ratio)
	nuclear_electricsupply=(sum(instance.generate_energy['nuclear',t,l].value for t in instance.time for l in instance.location)/value(instance.generate_efficiency['nuclear']))*value(instance.invest_operate_ratio)
	fossil_electricsupply=(sum(instance.generate_energy['fossil',t,l].value for t in instance.time for l in instance.location)/value(instance.generate_efficiency['fossil'])+sum(instance.generate_energy['other',t,l].value for t in instance.time for l in instance.location)/value(instance.generate_efficiency['other']))*value(instance.invest_operate_ratio)
	electricsupply_electricdemand=(sum(instance.generate_energy[e,t,l].value for e in instance.electric_source for t in instance.time for l in instance.location)-sum(instance.store_energy_input[t,l].value for t in instance.time for l in instance.location)-sum(instance.transmit_energy_transfer[t,l,k].value for t in instance.time for l in instance.location for k in instance.location)-sum(instance.e2h_energy_convert[t,l].value for t in instance.time for l in instance.location))*value(instance.invest_operate_ratio)
	electricsupply_store=sum(instance.store_energy_input[t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	electricsupply_transmit=sum(instance.transmit_energy_transfer[t,l,k].value for t in instance.time for l in instance.location for k in instance.location)*value(instance.invest_operate_ratio)
	store_electricdemand=sum(instance.store_energy_output[t,l].value*value(instance.store_efficiency) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	transmit_electricdemand=sum(instance.transmit_energy_transfer[t,l,k].value*value(instance.transmit_efficiency) for t in instance.time for l in instance.location for k in instance.location)*value(instance.invest_operate_ratio)
	electricsupply_hydrogensupply=sum(instance.e2h_energy_convert[t,l].value*value(instance.e2h_efficiency) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogendemand_electricdemand=sum(instance.h2e_energy_convert[t,l].value*value(instance.h2e_efficiency) for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogensupply_hydrogendemand=(sum(instance.e2h_energy_convert[t,l].value*value(instance.e2h_efficiency) for t in instance.time for l in instance.location)-sum(instance.reserve_energy_input[t,l].value for t in instance.time for l in instance.location)-sum(instance.pipe_energy_transfer[t,l,k].value for t in instance.time for l in instance.location for k in instance.location)-sum(instance.h2e_energy_convert[t,l].value for t in instance.time for l in instance.location))*value(instance.invest_operate_ratio)
	hydrogensupply_reserve=sum(instance.reserve_energy_input[t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogensupply_pipe=sum(instance.pipe_energy_transfer[t,l,k].value for t in instance.time for l in instance.location for k in instance.location)*value(instance.invest_operate_ratio)
	reserve_hydrogendemand=(sum(instance.reserve_energy_output[t,l].value for t in instance.time for l in instance.location)*value(instance.reserve_efficiency))*value(instance.invest_operate_ratio)
	pipe_hydrogendemand=(sum(instance.pipe_energy_transfer[t,l,k].value for t in instance.time for l in instance.location for k in instance.location)*value(instance.pipe_efficiency))*value(instance.invest_operate_ratio)
	electric_space_heat=sum(instance.match_energy_electric_heat['space',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	electric_water_heat=sum(instance.match_energy_electric_heat['water',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	electric_boiler_heat=sum(instance.match_energy_electric_heat['boiler',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	electric_lightduty_transport=sum(instance.match_energy_electric_transport['lightduty',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	electric_heavyduty_transport=sum(instance.match_energy_electric_transport['heavyduty',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	electric_fix=sum(instance.match_energy_electric_fix[w,t,l].value for w in instance.fix_use for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogen_space_heat=sum(instance.match_energy_hydrogen_heat['space',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogen_water_heat=sum(instance.match_energy_hydrogen_heat['water',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogen_boiler_heat=sum(instance.match_energy_hydrogen_heat['boiler',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogen_lightduty_transport=sum(instance.match_energy_hydrogen_transport['lightduty',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogen_heavyduty_transport=sum(instance.match_energy_hydrogen_transport['heavyduty',t,l].value for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	hydrogen_fix=sum(instance.match_energy_hydrogen_fix[w,t,l].value for w in instance.fix_use for t in instance.time for l in instance.location)*value(instance.invest_operate_ratio)
	bioenergy_space_heat=(sum(instance.match_energy_fuel_heat['biomass','space',t,l].value for t in instance.time for l in instance.location)+sum(instance.match_energy_fuel_heat['biofuel','space',t,l].value for t in instance.time for l in instance.location))*value(instance.invest_operate_ratio)
	bioenergy_water_heat=(sum(instance.match_energy_fuel_heat['biomass','water',t,l].value for t in instance.time for l in instance.location)+sum(instance.match_energy_fuel_heat['biofuel','water',t,l].value for t in instance.time for l in instance.location))*value(instance.invest_operate_ratio)
	bioenergy_boiler_heat=(sum(instance.match_energy_fuel_heat['biomass','boiler',t,l].value for t in instance.time for l in instance.location)+sum(instance.match_energy_fuel_heat['biofuel','boiler',t,l].value for t in instance.time for l in instance.location))*value(instance.invest_operate_ratio)
	bioenergy_lightduty_transport=(sum(instance.match_energy_fuel_transport['biomass','lightduty',t,l].value for t in instance.time for l in instance.location)+sum(instance.match_energy_fuel_transport['biofuel','lightduty',t,l].value for t in instance.time for l in instance.location))*value(instance.invest_operate_ratio)
	bioenergy_heavyduty_transport=(sum(instance.match_energy_fuel_transport['biomass','heavyduty',t,l].value for t in instance.time for l in instance.location)+sum(instance.match_energy_fuel_transport['biofuel','heavyduty',t,l].value for t in instance.time for l in instance.location))*value(instance.invest_operate_ratio)
	bioenergy_fix=(sum(instance.match_energy_fuel_fix['biomass',w,t,l].value for w in instance.fix_use for t in instance.time for l in instance.location)+sum(instance.match_energy_fuel_fix['biofuel',w,t,l].value for w in instance.fix_use for t in instance.time for l in instance.location))*value(instance.invest_operate_ratio)
	fossil_space_heat=(sum(instance.match_energy_fuel_heat['naturalgas','space',t,l].value for t in instance.time for l in instance.location)+sum(instance.match_energy_fuel_heat['petroleum','space',t,l].value for t in instance.time for l in instance.location)+sum(instance.match_energy_fuel_heat['coal','space',t,l].value for t in instance.time for l in instance.location))*value(instance.invest_operate_ratio)
	fossil_water_heat=(sum(instance.match_energy_fuel_heat['naturalgas','water',t,l].value for t in instance.time for l in instance.location)+sum(instance.match_energy_fuel_heat['petroleum','water',t,l].value for t in instance.time for l in instance.location)+sum(instance.match_energy_fuel_heat['coal','water',t,l].value for t in instance.time for l in instance.location))*value(instance.invest_operate_ratio)
	fossil_boiler_heat=(sum(instance.match_energy_fuel_heat['naturalgas','boiler',t,l].value for t in instance.time for l in instance.location)+sum(instance.match_energy_fuel_heat['petroleum','boiler',t,l].value for t in instance.time for l in instance.location)+sum(instance.match_energy_fuel_heat['coal','boiler',t,l].value for t in instance.time for l in instance.location))*value(instance.invest_operate_ratio)
	fossil_lightduty_transport=(sum(instance.match_energy_fuel_transport['naturalgas','lightduty',t,l].value for t in instance.time for l in instance.location)+sum(instance.match_energy_fuel_transport['petroleum','lightduty',t,l].value for t in instance.time for l in instance.location)+sum(instance.match_energy_fuel_transport['coal','lightduty',t,l].value for t in instance.time for l in instance.location))*value(instance.invest_operate_ratio)
	fossil_heavyduty_transport=(sum(instance.match_energy_fuel_transport['naturalgas','heavyduty',t,l].value for t in instance.time for l in instance.location)+sum(instance.match_energy_fuel_transport['petroleum','heavyduty',t,l].value for t in instance.time for l in instance.location)+sum(instance.match_energy_fuel_transport['coal','heavyduty',t,l].value for t in instance.time for l in instance.location))*value(instance.invest_operate_ratio)
	fossil_fix=(sum(instance.match_energy_fuel_fix['naturalgas',w,t,l].value for w in instance.fix_use for t in instance.time for l in instance.location)+sum(instance.match_energy_fuel_fix['petroleum',w,t,l].value for w in instance.fix_use for t in instance.time for l in instance.location)+sum(instance.match_energy_fuel_fix['coal',w,t,l].value for w in instance.fix_use for t in instance.time for l in instance.location))*value(instance.invest_operate_ratio)
	file.write('%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\n' % (solar_electricsupply,wind_electricsupply,hydro_electricsupply,bioenergy_electricsupply,nuclear_electricsupply,fossil_electricsupply,electricsupply_electricdemand,electricsupply_store,electricsupply_transmit,store_electricdemand,transmit_electricdemand,electricsupply_hydrogensupply,hydrogendemand_electricdemand,hydrogensupply_hydrogendemand,hydrogensupply_reserve,hydrogensupply_pipe,reserve_hydrogendemand,pipe_hydrogendemand,electric_space_heat,electric_water_heat,electric_boiler_heat,electric_lightduty_transport,electric_heavyduty_transport,electric_fix,hydrogen_space_heat,hydrogen_water_heat,hydrogen_boiler_heat,hydrogen_lightduty_transport,hydrogen_heavyduty_transport,hydrogen_fix,bioenergy_space_heat,bioenergy_water_heat,bioenergy_boiler_heat,bioenergy_lightduty_transport,bioenergy_heavyduty_transport,bioenergy_fix,fossil_space_heat,fossil_water_heat,fossil_boiler_heat,fossil_lightduty_transport,fossil_heavyduty_transport,fossil_fix))